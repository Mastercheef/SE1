{"version":3,"sources":["PlotComponent.js","Home.js","App.js","index.js"],"names":["PlotComponent","plotComponentFactory","Plotly","moment","locale","useStyles","makeStyles","theme","parkhausContainer","width","dividerContainer","marginTop","spacing","marginBottom","tableContainer","height","cmdButtons","diagramButtons","momentTimeFormat","Home","classes","React","useState","diagramError","setDiagramError","diagramResult","setDiagramResult","cmdError","setCmdError","cmdResult","setCmdResult","rows","setRows","parkhausPost","request","id","params","split","axios","get","then","response","windowRows","newRows","window","concat","length","nr","data","arrival","format","departure","duration","utc","asMilliseconds","licensePlate","vehicleType","customerType","price","ticketId","useEffect","getCmd","text","cmd","unit","isDiagram","catch","Grid","container","direction","justify","alignItems","className","item","dangerouslySetInnerHTML","__html","Divider","variant","Typography","color","map","btn","index","Button","onClick","disableColumnMenu","disableSelectionOnClick","pageSize","rowsPerPageOptions","localeText","deDE","props","MuiDataGrid","columns","field","headerName","breakpoints","up","maxWidth","homePaper","margin","paddingTop","paddingBottom","minWidth","App","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","palette","type","ThemeProvider","CssBaseline","Container","Paper","elevation","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b9ea14e.chunk.js","sourcesContent":["import plotComponentFactory from \"react-plotly.js/factory\";\r\nimport Plotly from \"plotly.js-dist\";\r\n\r\nconst PlotComponent = plotComponentFactory(Plotly);\r\n\r\nexport default PlotComponent;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Button, Divider, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { DataGrid, deDE } from \"@material-ui/data-grid\";\r\nimport PlotComponent from \"./PlotComponent\";\r\nimport moment from \"moment\";\r\n\r\nmoment.locale(\"de\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    parkhausContainer: {\r\n        width: \"100%\"\r\n    },\r\n    dividerContainer: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n        width: \"100%\"\r\n    },\r\n    tableContainer: {\r\n        height: \"650px\",\r\n        width: \"100%\"\r\n    }\r\n}));\r\n\r\nconst cmdButtons = [\r\n    [\"Summe\", \"Summe\", \"€\"],\r\n    [\"Ø Ticketpreis\", \"Durchschnitt\", \"€\"],\r\n    [\"Gedruckte Tickets\", \"habenVerlassen\"],\r\n    [\"Aktuelle Auslastung\", \"Auslastung\"]\r\n];\r\n\r\nconst diagramButtons = [\r\n    [\"Tickets\", \"Diagramm\"],\r\n    [\"Fahrzeugtypen\", \"FahrzeugtypenDiagramm\"],\r\n    [\"Auslastung\", \"AuslastungDiagramm\"],\r\n    [\"Kundentypen\", \"KundentypenDiagramm\"],\r\n    [\"Ø Parkdauer Abonnenten\", \"AboParkdauerDiagramm\"]\r\n];\r\n\r\nconst momentTimeFormat = \"DD.MM.YY HH:mm:ss\";\r\nconst momentDurationFormat = \"HH:mm:ss\";\r\n\r\nconst Home = () => {\r\n    const classes = useStyles();\r\n\r\n    const columns = [\r\n        { field: \"nr\", headerName: \"Nr\", width: 75 },\r\n        { field: \"arrival\", headerName: \"Ankunft\", width: 200 },\r\n        { field: \"departure\", headerName: \"Abfahrt\", width: 200 },\r\n        { field: \"duration\", headerName: \"Dauer\", width: 100 },\r\n        { field: \"licensePlate\", headerName: \"Kennzeichen\", width: 140 },\r\n        { field: \"vehicleType\", headerName: \"Fahrzeugtyp\", width: 140 },\r\n        { field: \"customerType\", headerName: \"Kundentyp\", width: 130 },\r\n        { field: \"price\", headerName: \"Preis\", width: 90 },\r\n        { field: \"ticketId\", headerName: \"Ticket ID\", width: 300 }\r\n    ];\r\n\r\n    const [diagramError, setDiagramError] = React.useState(false);\r\n    const [diagramResult, setDiagramResult] = React.useState();\r\n\r\n    const [cmdError, setCmdError] = React.useState(false);\r\n    const [cmdResult, setCmdResult] = React.useState(\"Klicke einen Button an\");\r\n\r\n    const [rows, setRows] = React.useState([]);\r\n\r\n    const updateRows = (id) => {\r\n        axios.get(`./api/?cmd=ticket&id=${id}`).then((response) => {\r\n            let windowRows;\r\n            if (window.rows) {\r\n                windowRows = window.rows;\r\n            } else {\r\n                windowRows = [];\r\n            }\r\n            const newRows = windowRows.concat({\r\n                id: windowRows.length + 1,\r\n                nr: response.data.nr,\r\n                arrival: moment(response.data.arrival).format(momentTimeFormat),\r\n                departure: moment(response.data.departure).format(momentTimeFormat),\r\n                duration: moment.utc(moment.duration(response.data.duration).asMilliseconds()).format(momentDurationFormat),\r\n                licensePlate: response.data.licensePlate,\r\n                vehicleType: response.data.vehicleType,\r\n                customerType: response.data.customerType,\r\n                price: `${response.data.price} €`,\r\n                ticketId: response.data.ticketId\r\n            });\r\n            window.rows = newRows;\r\n            setRows(newRows);\r\n        });\r\n    };\r\n\r\n    const parkhausPost = (request) => {\r\n        const params = request.split(\",\");\r\n        if (params[0] === \"leave\") {\r\n            updateRows(params[5]);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        window.parkhausPost = parkhausPost;\r\n    }, []);\r\n\r\n    const parkhaus = \"<ccm-parkhaus-10-2-3 \" +\r\n        \"key='{\\\"name\\\":\\\"CarHome\\\",\" +\r\n        \"\\\"server_url\\\":\\\"./api/\\\",\" +\r\n        \"\\\"client_categories\\\":[\\\"Standard\\\",\\\"Abo-1\\\",\\\"Abo-2\\\"],\" +\r\n        \"\\\"vehicle_types\\\":[\\\"Limousine\\\", \\\"Kombi\\\", \\\"SUV\\\"],\" +\r\n        \"\\\"delay\\\": 100,\" +\r\n        \"\\\"hide_table\\\": true,\" +\r\n        \"\\\"css\\\": [\\\"ccm.load\\\",\\\"./css/parkhaus.css\\\"],\" +\r\n        \"\\\"images\\\":{\" +\r\n            \"\\\"car\\\":\\\"./img/car.png\\\",\" +\r\n            \"\\\"parking_garage\\\":\\\"./img/parkhaus.png\\\",\" +\r\n            \"\\\"empty\\\":\\\"./img/space.png\\\"\" +\r\n        \"}}'>\" +\r\n        \"</ccm-parkhaus-10-2-3>\";\r\n\r\n    const getCmd = (text, cmd, unit, isDiagram) => {\r\n        axios.get(`./api/?cmd=${cmd}`).then((response) => {\r\n            if (isDiagram) {\r\n                setDiagramError(false);\r\n                setDiagramResult(response.data);\r\n            } else {\r\n                setCmdError(false);\r\n                if (unit) {\r\n                    setCmdResult(`${text}: ${response.data} ${unit}`);\r\n                } else {\r\n                    setCmdResult(`${text}: ${response.data}`);\r\n                }\r\n            }\r\n        }).catch(() => {\r\n            if (isDiagram) {\r\n                setDiagramError(true);\r\n                setDiagramResult(`${text}: Fehler!`);\r\n            } else {\r\n                setCmdError(true);\r\n                setCmdResult(`${text}: Fehler!`);\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n        >\r\n            <Grid\r\n                className={classes.parkhausContainer}\r\n                item\r\n                dangerouslySetInnerHTML={{ __html: parkhaus }}\r\n            />\r\n            <Grid className={classes.dividerContainer} item>\r\n                <Divider variant=\"fullWidth\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={3}\r\n                >\r\n                    <Grid item>\r\n                        <Typography\r\n                            color={cmdError ? \"error\" : \"inherit\"}\r\n                            variant=\"h6\"\r\n                        >\r\n                            {cmdResult}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\"\r\n                            spacing={3}\r\n                        >\r\n                            {cmdButtons.map((btn, index) => {\r\n                                return (\r\n                                    <Grid key={`cmdButton-${index}`} item>\r\n                                        <Button\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            onClick={() => getCmd(btn[0], btn[1], btn[2], false)}\r\n                                        >{btn[0]}</Button>\r\n                                    </Grid>\r\n                                );\r\n                            })}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid className={classes.dividerContainer} item>\r\n                <Divider variant=\"fullWidth\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={3}\r\n                >\r\n                    <Grid item>\r\n                        {diagramError && (\r\n                            <Typography\r\n                                color=\"error\"\r\n                                variant=\"h6\"\r\n                            >\r\n                                {diagramResult}\r\n                            </Typography>\r\n                        )}\r\n                        {(!diagramError && diagramResult) && (\r\n                            <PlotComponent\r\n                                data={diagramResult.data}\r\n                            />\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\"\r\n                            spacing={3}\r\n                        >\r\n                            {diagramButtons.map((btn, index) => {\r\n                                return (\r\n                                    <Grid key={`diagramButton-${index}`} item>\r\n                                        <Button\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            onClick={() => getCmd(btn[0], btn[1], null, true)}\r\n                                        >{btn[0]}</Button>\r\n                                    </Grid>\r\n                                );\r\n                            })}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid className={classes.dividerContainer} item>\r\n                <Divider variant=\"fullWidth\" />\r\n            </Grid>\r\n            <Grid className={classes.tableContainer} item>\r\n                <DataGrid\r\n                    disableColumnMenu={true}\r\n                    disableSelectionOnClick={true}\r\n                    pageSize={10}\r\n                    rowsPerPageOptions={[10, 25, 50, 100]}\r\n                    localeText={deDE.props.MuiDataGrid.localeText}\r\n                    rows={rows}\r\n                    columns={columns}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\nimport { Container, createMuiTheme, CssBaseline, makeStyles, Paper, ThemeProvider, useMediaQuery } from \"@material-ui/core\";\r\nimport Home from \"./Home\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            maxWidth: \"90%\"\r\n        }\r\n    },\r\n    homePaper: {\r\n        margin: theme.spacing(3),\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n        minWidth: \"1000px\"\r\n    }\r\n}));\r\n\r\nconst App = () => {\r\n    const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\r\n\r\n    const theme = React.useMemo(\r\n        () => createMuiTheme({\r\n            palette: {\r\n                type: prefersDarkMode ? \"dark\" : \"light\"\r\n            }\r\n        }),\r\n        [prefersDarkMode]\r\n    );\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <Container className={classes.container}>\r\n                <Paper className={classes.homePaper} elevation={3}>\r\n                    <Container className={classes.container}>\r\n                        <Home />\r\n                    </Container>\r\n                </Paper>\r\n            </Container>\r\n        </ThemeProvider >\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}